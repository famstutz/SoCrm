//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoCrm.Test.WpfClient.LoggingService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="LoggingService.ILoggingService")]
    public interface ILoggingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetAll", ReplyAction="http://tempuri.org/ILoggingService/GetAllResponse")]
        SoCrm.Services.Logging.Contracts.LogEvent[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetAll", ReplyAction="http://tempuri.org/ILoggingService/GetAllResponse")]
        System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetBySeverity", ReplyAction="http://tempuri.org/ILoggingService/GetBySeverityResponse")]
        SoCrm.Services.Logging.Contracts.LogEvent[] GetBySeverity(SoCrm.Services.Logging.Contracts.Severity severity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetBySeverity", ReplyAction="http://tempuri.org/ILoggingService/GetBySeverityResponse")]
        System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent[]> GetBySeverityAsync(SoCrm.Services.Logging.Contracts.Severity severity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetByObjectId", ReplyAction="http://tempuri.org/ILoggingService/GetByObjectIdResponse")]
        SoCrm.Services.Logging.Contracts.LogEvent GetByObjectId(System.Guid objectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetByObjectId", ReplyAction="http://tempuri.org/ILoggingService/GetByObjectIdResponse")]
        System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent> GetByObjectIdAsync(System.Guid objectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/Log", ReplyAction="http://tempuri.org/ILoggingService/LogResponse")]
        void Log(string message, SoCrm.Services.Logging.Contracts.Severity severity, System.DateTime timeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/Log", ReplyAction="http://tempuri.org/ILoggingService/LogResponse")]
        System.Threading.Tasks.Task LogAsync(string message, SoCrm.Services.Logging.Contracts.Severity severity, System.DateTime timeStamp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoggingServiceChannel : SoCrm.Test.WpfClient.LoggingService.ILoggingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoggingServiceClient : System.ServiceModel.ClientBase<SoCrm.Test.WpfClient.LoggingService.ILoggingService>, SoCrm.Test.WpfClient.LoggingService.ILoggingService {
        
        public LoggingServiceClient() {
        }
        
        public LoggingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoggingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SoCrm.Services.Logging.Contracts.LogEvent[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public SoCrm.Services.Logging.Contracts.LogEvent[] GetBySeverity(SoCrm.Services.Logging.Contracts.Severity severity) {
            return base.Channel.GetBySeverity(severity);
        }
        
        public System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent[]> GetBySeverityAsync(SoCrm.Services.Logging.Contracts.Severity severity) {
            return base.Channel.GetBySeverityAsync(severity);
        }
        
        public SoCrm.Services.Logging.Contracts.LogEvent GetByObjectId(System.Guid objectId) {
            return base.Channel.GetByObjectId(objectId);
        }
        
        public System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent> GetByObjectIdAsync(System.Guid objectId) {
            return base.Channel.GetByObjectIdAsync(objectId);
        }
        
        public void Log(string message, SoCrm.Services.Logging.Contracts.Severity severity, System.DateTime timeStamp) {
            base.Channel.Log(message, severity, timeStamp);
        }
        
        public System.Threading.Tasks.Task LogAsync(string message, SoCrm.Services.Logging.Contracts.Severity severity, System.DateTime timeStamp) {
            return base.Channel.LogAsync(message, severity, timeStamp);
        }
    }
}
