//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18034
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SoCrm.Test.WpfClient.Logging {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Logging.ILoggingService")]
    public interface ILoggingService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetAllLogEvents", ReplyAction="http://tempuri.org/ILoggingService/GetAllLogEventsResponse")]
        SoCrm.Services.Logging.Contracts.LogEvent[] GetAllLogEvents();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetAllLogEvents", ReplyAction="http://tempuri.org/ILoggingService/GetAllLogEventsResponse")]
        System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent[]> GetAllLogEventsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetLogEventsBySeverity", ReplyAction="http://tempuri.org/ILoggingService/GetLogEventsBySeverityResponse")]
        SoCrm.Services.Logging.Contracts.LogEvent[] GetLogEventsBySeverity(SoCrm.Services.Logging.Contracts.Severity severity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetLogEventsBySeverity", ReplyAction="http://tempuri.org/ILoggingService/GetLogEventsBySeverityResponse")]
        System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent[]> GetLogEventsBySeverityAsync(SoCrm.Services.Logging.Contracts.Severity severity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetLogEventByObjectId", ReplyAction="http://tempuri.org/ILoggingService/GetLogEventByObjectIdResponse")]
        SoCrm.Services.Logging.Contracts.LogEvent GetLogEventByObjectId(System.Guid objectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/GetLogEventByObjectId", ReplyAction="http://tempuri.org/ILoggingService/GetLogEventByObjectIdResponse")]
        System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent> GetLogEventByObjectIdAsync(System.Guid objectId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/LogEvent", ReplyAction="http://tempuri.org/ILoggingService/LogEventResponse")]
        void LogEvent(string message, SoCrm.Services.Logging.Contracts.Severity severity, System.DateTime timeStamp);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggingService/LogEvent", ReplyAction="http://tempuri.org/ILoggingService/LogEventResponse")]
        System.Threading.Tasks.Task LogEventAsync(string message, SoCrm.Services.Logging.Contracts.Severity severity, System.DateTime timeStamp);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoggingServiceChannel : SoCrm.Test.WpfClient.Logging.ILoggingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoggingServiceClient : System.ServiceModel.ClientBase<SoCrm.Test.WpfClient.Logging.ILoggingService>, SoCrm.Test.WpfClient.Logging.ILoggingService {
        
        public LoggingServiceClient() {
        }
        
        public LoggingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoggingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SoCrm.Services.Logging.Contracts.LogEvent[] GetAllLogEvents() {
            return base.Channel.GetAllLogEvents();
        }
        
        public System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent[]> GetAllLogEventsAsync() {
            return base.Channel.GetAllLogEventsAsync();
        }
        
        public SoCrm.Services.Logging.Contracts.LogEvent[] GetLogEventsBySeverity(SoCrm.Services.Logging.Contracts.Severity severity) {
            return base.Channel.GetLogEventsBySeverity(severity);
        }
        
        public System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent[]> GetLogEventsBySeverityAsync(SoCrm.Services.Logging.Contracts.Severity severity) {
            return base.Channel.GetLogEventsBySeverityAsync(severity);
        }
        
        public SoCrm.Services.Logging.Contracts.LogEvent GetLogEventByObjectId(System.Guid objectId) {
            return base.Channel.GetLogEventByObjectId(objectId);
        }
        
        public System.Threading.Tasks.Task<SoCrm.Services.Logging.Contracts.LogEvent> GetLogEventByObjectIdAsync(System.Guid objectId) {
            return base.Channel.GetLogEventByObjectIdAsync(objectId);
        }
        
        public void LogEvent(string message, SoCrm.Services.Logging.Contracts.Severity severity, System.DateTime timeStamp) {
            base.Channel.LogEvent(message, severity, timeStamp);
        }
        
        public System.Threading.Tasks.Task LogEventAsync(string message, SoCrm.Services.Logging.Contracts.Severity severity, System.DateTime timeStamp) {
            return base.Channel.LogEventAsync(message, severity, timeStamp);
        }
    }
}
